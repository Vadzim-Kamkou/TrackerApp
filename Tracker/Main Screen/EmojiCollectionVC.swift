import UIKit

final class EmojiCollectionViewCell: UICollectionViewCell {
    
    // MARK: - Properties
    // –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ —á–µ–≥–æ –æ–Ω –Ω—É–∂–µ–Ω?
    static let identifier = "EmojiCollectionViewCell"
    var onTap: (() -> Void)?
    
    // MARK: - UI Elements
    // –°–º–∞–π–ª–∏–∫
    private let emojiLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 32)
        label.textAlignment = .center
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    // –ó–∞–¥–Ω–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏
    private let backgroundSelectionView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor(resource: .appLightGray)
        view.layer.cornerRadius = 16
        view.translatesAutoresizingMaskIntoConstraints = false
        view.isHidden = true
        return view
    }()
    
    // MARK: - Initialization
    // –ù–µ –ø–æ–Ω–∏–º–∞—é –∑–∞—á–µ–º —ç—Ç–æ.
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupUI()
    }
    
    // –ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ? –ò—Å–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ assertion
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: - Setup UI
    // –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –∏ –±—ç–∫
    private func setupUI() {
        self.isUserInteractionEnabled = true
        contentView.isUserInteractionEnabled = true
        
        contentView.addSubview(backgroundSelectionView)
        contentView.addSubview(emojiLabel)
        
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(cellTapped))
        contentView.addGestureRecognizer(tapGesture)

        setupConstraints()
    }
    
    @objc private func cellTapped() {
            print("üî• –Ø–ß–ï–ô–ö–ê –≠–ú–û–î–ñ–ò –¢–ê–ü–ù–£–¢–ê –ß–ï–†–ï–ó GESTURE!")
            onTap?()
        }
    
    // –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –±—ç–∫–∞ –∏ —Å–º–∞–π–ª–∞
    private func setupConstraints() {
        NSLayoutConstraint.activate([
            // Background selection view
            backgroundSelectionView.topAnchor.constraint(equalTo: contentView.topAnchor),
            backgroundSelectionView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            backgroundSelectionView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            backgroundSelectionView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),
            
            // Emoji label
            emojiLabel.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),
            emojiLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)
        ])
    }
    
    // MARK: - Configuration
    // –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –≥–¥–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
    func configure(with emoji: String, isSelected: Bool, onTap: @escaping () -> Void) {
          emojiLabel.text = emoji
          setSelected(isSelected)
          self.onTap = onTap
      }
    
    // —Å–∫—Ä—ã–≤–∞–µ–º –±—ç–∫ –µ—Å–ª–∏ —Å–º–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.
    func setSelected(_ selected: Bool) {
        backgroundSelectionView.isHidden = !selected
    }
    
    // MARK: - Reuse
    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    override func prepareForReuse() {
        super.prepareForReuse()
        emojiLabel.text = nil
        backgroundSelectionView.isHidden = true
    }
}
